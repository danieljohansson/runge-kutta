{"ts":1353773244139,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"(function () {\n    \n    var Plot = function () {\n        this.width = 600;\n        this.height = 400;\n        this.markerSize = 5;\n        \n        this._axisEqual = false;\n        this._axisScales = false;\n        this._crosshairOn = false;\n        \n        this.canvas = document.createElement('canvas');\n        document.body.appendChild(this.canvas);\n        this.ctx = this.canvas.getContext('2d');\n        \n        // store line data\n        this.lines = [];\n        \n        this.setCtxTransform();\n    };\n    \n    Plot.prototype = {\n        \n        plot: function (x, y, color, marker, noLine) {\n            if (!Array.isArray(x) || !Array.isArray(y)) {\n                throw new TypeError('Parameters \"x\" and \"y\" must be arrays.');\n            }\n            if (x.length !== y.length) {\n                throw new Error('Arrays \"x\" and \"y\" must be of equal length.');\n            }\n            \n            var line = {\n                x: x,\n                y: y,\n                color: color,\n                marker: marker,\n                noLine: noLine\n            };\n            this.lines.push(line);\n            \n            this.render();\n        },\n        \n        setCtxTransform: function () {\n            var borderTop = 15, borderRight = 15, borderBottom = 15, borderLeft = 15;\n            if (this._axisOn) {\n                borderBottom += 30;\n                borderLeft += 50;\n            }\n            this.canvas.width = this.width + borderLeft + borderRight;\n            this.canvas.height = this.height + borderTop + borderBottom;\n            this.ctx.translate(borderLeft, this.height + borderTop);\n            this.ctx.scale(1, -1);\n        },\n        \n        render: function () {\n            this.updateViewport();\n            \n            // Paint white background\n            this.ctx.save();\n            this.ctx.beginPath();\n            this.ctx.setTransform(1, 0, 0, 1, 0, 0);\n            this.ctx.rect(0, 0, this.canvas.width, this.canvas.height);\n            this.ctx.fillStyle = 'white';\n            this.ctx.fill();\n            this.ctx.restore();\n            \n            if (this._crosshairOn) {\n                this.drawCrosshair();\n            }\n            if (this._axisOn) {\n                this.ctx.font = '15px Calibri, sans-serif';\n                this.ctx.fillStyle = 'black';\n                this.drawXAxis();\n                this.drawYAxis();\n            }\n            \n            // Draw lines\n            for (var j = 0; j < this.lines.length; j++) {\n                this.drawLine(this.lines[j]);\n            }\n        },\n        \n        updateViewport: function () {\n            var j, len = this.lines.length;\n            var xMax, xMin, yMax, yMin;\n            \n            for (j = 0; j < len; j++) {\n                \n                xMax = Math.max.apply(this, this.lines[j].x);\n                xMin = Math.min.apply(this, this.lines[j].x);\n                yMax = Math.max.apply(this, this.lines[j].y);\n                yMin = Math.min.apply(this, this.lines[j].y);\n                \n                if (j === 0 || xMax > this.xMax) { this.xMax = xMax; }\n                if (j === 0 || xMin < this.xMin) { this.xMin = xMin; }\n                if (j === 0 || yMax > this.yMax) { this.yMax = yMax; }\n                if (j === 0 || yMin < this.yMin) { this.yMin = yMin; }\n            }\n            \n            if (this._axisEqual) {\n                var xSpan = this.xMax - this.xMin;\n                var ySpan = this.yMax - this.yMin;\n                var xMid = this.xMin + xSpan / 2;\n                var yMid = this.yMin + ySpan / 2;\n                \n                // minimum pixels per length\n                var scale = Math.min(this.width / xSpan, this.height / ySpan);\n                \n                this.xMin = xMid - 0.5 * this.width / scale;\n                this.xMax = xMid + 0.5 * this.width / scale;\n                this.yMin = yMid - 0.5 * this.height / scale;\n                this.yMax = yMid + 0.5 * this.height / scale;\n            }\n        },\n        \n        circleMarkerAt: function (x, y) {\n            var size = this.markerSize;\n            this.ctx.moveTo(x + size, y);\n            this.ctx.arc(x, y, size, 0, Math.PI*2, true);\n            this.ctx.moveTo(x, y);\n        },\n        \n        plusMarkerAt: function (x, y) {\n            var size = this.markerSize;\n            this.ctx.moveTo(Math.ceil(x) - size - 1, Math.ceil(y) + 0.5);\n            this.ctx.lineTo(Math.ceil(x) + size, Math.ceil(y) + 0.5);\n            this.ctx.moveTo(Math.ceil(x) - 0.5, Math.ceil(y) - size);\n            this.ctx.lineTo(Math.ceil(x) - 0.5, Math.ceil(y) + size + 1);\n            this.ctx.moveTo(x, y);\n        },\n        \n        xMarkerAt: function (x, y) {\n            var size = this.markerSize;\n            this.ctx.moveTo(Math.round(x) - size + 1, Math.round(y) - size + 1);\n            this.ctx.lineTo(Math.round(x) + size - 1, Math.round(y) + size - 1);\n            this.ctx.moveTo(Math.round(x) - size + 1, Math.round(y) + size - 1);\n            this.ctx.lineTo(Math.round(x) + size - 1, Math.round(y) - size + 1);\n            this.ctx.moveTo(x, y);\n        },\n        \n        boxMarkerAt: function (x, y) {\n            var size = this.markerSize;\n            this.ctx.rect(Math.round(x) + 0.5 - size, Math.round(y) + 0.5 - size, 2*size - 1, 2*size - 1);\n            this.ctx.moveTo(x, y);\n        },\n        \n        drawLine: function (line) {\n            \n            // make copy to leave original intact\n            var x = line.x.slice();\n            var y = line.y.slice();\n            var i, len = x.length;\n            \n            // adjust to plot size\n            for (i = 0; i < len; i++) {\n                x[i] = (x[i] - this.xMin) / (this.xMax - this.xMin) * this.width;\n                y[i] = (y[i] - this.yMin) / (this.yMax - this.yMin) * this.height;\n            }\n            \n            var markers = {\n                'o': 'circleMarkerAt',\n                'x': 'xMarkerAt',\n                '+': 'plusMarkerAt',\n                'box': 'boxMarkerAt'\n            };\n            this.ctx.beginPath();\n            this.ctx.moveTo(x[0], y[0]);\n            \n            for (i = 0; i < len; i++) {\n                if (!line.noLine) {\n                    this.ctx.lineTo(x[i], y[i]);\n                }\n                if (markers.hasOwnProperty(line.marker)) {\n                    this[markers[line.marker]](x[i], y[i]);\n                }\n            }\n            \n            this.ctx.strokeStyle = line.color || 'black';\n            this.ctx.stroke();\n        },\n        \n        setSize: function (width, height) {\n            // canvas width = width + borders width\n            if (width > 0 && height > 0) {\n                this.width = width;\n                this.height = height;\n                this.setCtxTransform();\n                this.render();\n            }\n        },\n        \n        axisEqual: function (bool) {\n            this._axisEqual = (bool === undefined ? true : bool);\n            this.render();\n        },\n        \n        crosshairOn: function () {\n            this._crosshairOn = true;\n            this.render();\n        },\n        \n        drawCrosshair: function () {\n            if (this.xMin <= 0 && 0 <= this.xMax) {\n                this.drawLine({\n                    x: [0, 0], \n                    y: [this.yMin, this.yMax], \n                    color: 'lightgray'\n                });\n            }\n            if (this.yMin <= 0 && 0 <= this.yMax) {\n                this.drawLine({\n                    x: [this.xMin, this.xMax], \n                    y: [0, 0], \n                    color: 'lightgray'\n                });\n            }\n        },\n        \n        axisOn: function () {\n            this._axisOn = true;\n            this.setCtxTransform();\n            this.render();\n        },\n        \n        getScales: function (min, max) {\n            var log10 = function (x) { return Math.log(x)/Math.log(10); };\n            var keepEveryNth = function (arr, n) {\n                var keep = [];\n                for (var i = 0; i < arr.length; i += n) {\n                    keep.push(arr[i]);\n                }\n                return keep;\n            };\n            var absMax = Math.max(Math.abs(min), Math.abs(max));\n            var magn = Math.pow(10, Math.floor(log10(absMax)));\n            var a = Math.ceil(min / magn);\n            var b = Math.floor(max / magn);\n            var scales = [];\n            \n            if (b - a < 5) {\n                magn = magn / 10;\n                a = Math.ceil(min / magn);\n                b = Math.floor(max / magn);\n            }\n            \n            for (var i = 0; i < b - a + 1; i++) {\n                // (1/magn) to avoid some trailing decimals\n                scales.push((a + i)/(1/magn));\n            }\n            \n            if (b - a > 10) {\n                scales = keepEveryNth(scales, Math.ceil((b - a)/10));\n            }\n            \n            return scales;\n        },\n        \n        drawXAxis: function () {\n            var scales = this.getScales(this.xMin, this.xMax);\n            var x, y = -12.5;\n            var i, len = scales.length;\n            var size = 5;\n            \n            this.ctx.beginPath();\n            this.ctx.moveTo(-13, y);\n            this.ctx.lineTo(this.width, y);\n            this.ctx.textAlign = 'center';\n            \n            for (i = 0; i < len; i++) {\n                // adjust to plot size\n                x = (scales[i] - this.xMin) / (this.xMax - this.xMin) * this.width;\n                \n                this.ctx.moveTo(Math.ceil(x) - 0.5, Math.ceil(y) - size);\n                this.ctx.lineTo(Math.ceil(x) - 0.5, Math.ceil(y));\n                \n                this.ctx.save();\n                this.ctx.scale(1, -1);\n                this.ctx.fillText(scales[i], x, -y + 20);\n                this.ctx.restore();\n            }\n            this.ctx.strokeStyle = 'black';\n            this.ctx.stroke();\n        },\n        \n        drawYAxis: function () {\n            var scales = this.getScales(this.yMin, this.yMax);\n            var y, x = -12.5;\n            var i, len = scales.length;\n            var size = 5;\n            \n            this.ctx.beginPath();\n            this.ctx.moveTo(x, -13);\n            this.ctx.lineTo(x, this.height);\n            this.ctx.textAlign = 'right';\n            \n            for (i = 0; i < len; i++) {\n                // adjust to plot size\n                y = (scales[i] - this.yMin) / (this.yMax - this.yMin) * this.height;\n                \n                this.ctx.moveTo(Math.ceil(x) - size, Math.ceil(y) - 0.5);\n                this.ctx.lineTo(Math.ceil(x), Math.ceil(y) - 0.5);\n                \n                this.ctx.save();\n                this.ctx.scale(1, -1);\n                this.ctx.fillText(scales[i], x - 12, -y + 4);\n                this.ctx.restore();\n            }\n            this.ctx.strokeStyle = 'black';\n            this.ctx.stroke();\n        }\n    };\n    \n    window.Plot = Plot;\n    \n})();\n"]],"start1":0,"start2":0,"length1":0,"length2":11006}]],"length":11006}
