{"ts":1353773238470,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"\nvar transpose = function (A) {\n    var m = A.length, n = A[0].length;\n    var i, j;\n    var T = [];\n    \n    for (j = 0; j < n; j++) {\n        T[j] = [];\n        for (i = 0; i < m; i++) {\n            T[j][i] = A[i][j];\n        }\n    }\n    return T;\n};\n\nvar add = function (a, b) {\n    return a.map(function (elem, i) {\n        return a[i] + b[i];   \n    });\n};\n\nvar mult = function (v, a) {\n    return v.map(function (elem) {\n        return a*elem;\n    });\n};\n\n\n// ----- Euler -----\n\nvar eulerSystem = function (f, tSpan, y0, h) {\n    var y = [y0];\n    var t = [tSpan[0]];\n    var n = 0;\n    var i = 0, size = y0.length;\n    var k1;\n    \n    while (t[n] < tSpan[1]) {\n        // Don't go beyond tSpan[1]\n        if (t[n] + h > tSpan[1]) h = tSpan[1] - t[n];\n        \n        k1 = f(t[n], y[n]);\n        y[n+1] = [];\n        \n        for (i = 0; i < size; i++) {\n            y[n+1][i] = y[n][i] + h*k1[i];\n        }\n        t[n+1] = t[n] + h;\n        n++;\n    }\n    \n    return {t:t, y:transpose(y), evals:n};\n};\n\n// ----- Runge-Kutta (4th order) ----- \n\nvar rk4System = function (f, tSpan, y0, h) {\n    var y = [y0];\n    var t = [tSpan[0]];\n    var n = 0;\n    var k1, k2, k3, k4;\n    var i, size = y0.length;\n    var yEst = [];\n    \n    while (t[n] < tSpan[1]) {\n        \n        // Don't go beyond tSpan[1]\n        if (t[n] + h > tSpan[1]) h = tSpan[1] - t[n];\n        \n        \n        k1 = f(t[n], y[n]);\n        \n        for (i = 0; i < size; i++) {\n            yEst[i] = y[n][i] + h/2*k1[i];\n        }\n        k2 = f(t[n] + h/2, yEst);\n        \n        for (i = 0; i < size; i++) {\n            yEst[i] = y[n][i] + h/2*k2[i];\n        }\n        k3 = f(t[n] + h/2, yEst);\n        \n        for (i = 0; i < size; i++) {\n            yEst[i] = y[n][i] + h*k3[i];\n        }\n        k4 = f(t[n] + h, yEst);\n        \n        \n        y[n+1] = [];\n        for (i = 0; i < size; i++) {\n            y[n+1][i] = y[n][i] + h/6 * (k1[i] + 2*k2[i] + 2*k3[i] + k4[i]);\n        }\n        \n        t[n+1] = t[n] + h;\n        n++;\n    }\n    \n    return {t:t, y:transpose(y), evals:n*4};\n};\n\n// ----- Dorman-Prince (adaptive Runge-Kutta) ----- \n\nvar dp54System = function (f, tSpan, y0, tol, h0) {\n    var y = [y0];\n    var t = [tSpan[0]];\n    var n = 0, evals = 0;\n    var k1, k2, k3, k4, k5, k6, k7;\n    var h = h0 || (tSpan[1] - tSpan[0]) / 100; // initial guess\n    var r, scale, r2, ri;\n    var i, yEst = [], size = y0.length;\n    \n    var a21 = 1/5,\n        a31 = 3/40, a32 = 9/40,\n        a41 = 44/45, a42 = -56/15, a43 = 32/9,\n        a51 = 19372/6561, a52 = -25360/2187, a53 = 64448/6561, a54 = -212/729,\n        a61 = 9017/3168, a62 = -355/33, a63 = 46732/5247, a64 = 49/176, a65 = -5103/18656,\n        a71 = 35/384, a73 = 500/1113, a74 = 125/192, a75 = -2187/6784, a76 = 11/84;\n    \n    // 5th order coefficients\n    var b1 = 35/384, b3 = 500/1113, b4 = 125/192, b5 = -2187/6784, b6 = 11/84; // b7 = 0;\n    \n    var c2 = 1/5, c3 = 3/10, c4 = 4/5, c5 = 8/9; // c6 = 1, c7 = 1;\n    \n    // coefficients for error calculation (e_i = b_i - b^_i)\n    var e1 = 71/57600, e3 = -71/16695, e4 = 71/1920,\n        e5 = -17253/339200, e6 = 22/525, e7 = -1/40;\n    \n    tol || (tol = 1e-2);\n    \n    while (t[n] < tSpan[1]) {\n        \n        // Don't go beyond tSpan[1]\n        if (t[n] + h > tSpan[1]) h = tSpan[1] - t[n];\n        \n        \n        k1 = f(t[n], y[n]);\n        \n        for (i = 0; i < size; i++) {\n            yEst[i] = y[n][i] + h*(a21*k1[i]);\n        }\n        k2 = f(t[n] + c2*h, yEst);\n        \n        for (i = 0; i < size; i++) {\n            yEst[i] = y[n][i] + h*(a31*k1[i] + a32*k2[i]);\n        }\n        k3 = f(t[n] + c3*h, yEst);\n        \n        for (i = 0; i < size; i++) {\n            yEst[i] = y[n][i] + h*(a41*k1[i] + a42*k2[i] + a43*k3[i]);\n        }\n        k4 = f(t[n] + c4*h, yEst);\n        \n        for (i = 0; i < size; i++) {\n            yEst[i] = y[n][i] + h*(a51*k1[i] + a52*k2[i] + a53*k3[i] + a54*k4[i]);\n        }\n        k5 = f(t[n] + c5*h, yEst);\n        \n        for (i = 0; i < size; i++) {\n            yEst[i] = y[n][i] + h*(a61*k1[i] + a62*k2[i] + a63*k3[i] + a64*k4[i] + a65*k5[i]);\n        }\n        k6 = f(t[n] + h, yEst);\n        \n        for (i = 0; i < size; i++) {\n            yEst[i] = y[n][i] + h*(a71*k1[i] + a73*k3[i] + a74*k4[i] + a75*k5[i] + a76*k6[i]);\n        }\n        k7 = f(t[n] + h, yEst);\n        \n        // r = estimated error / h\n        for (i = 0, r2 = 0; i < size; i++) {\n            ri = e1*k1[i] + e3*k3[i] + e4*k4[i] + e5*k5[i] + e6*k6[i] + e7*k7[i];\n            r2 += ri*ri;\n        }\n        r = Math.sqrt(r2);\n        scale = 0.84 * Math.pow(tol / r, 1/4); // (1/2)^(1/4) ≈ 0.84\n        \n        // Step forward if accurate enough\n        if (r < tol) {\n            // Use 5th order estimation (local extrapolation)\n            y[n+1] = [];\n            for (i = 0; i < size; i++) {\n                y[n+1][i] = y[n][i] + h*(b1*k1[i] + b3*k3[i] + b4*k4[i] + b5*k5[i] + b6*k6[i]);\n            }\n            t[n+1] = t[n] + h;\n            n++;\n        }\n        \n        // Adjust step size\n        if (scale < 0.1) h *= 0.1;\n        else if (scale > 4) h *= 4;\n        else h *= scale;\n        \n        if (h > 2) h = 2; // too large?\n        else if (h < 1e-9) h = 1e-9;\n        \n        evals += 7;\n    }\n    \n    return {t:t, y:transpose(y), evals:evals};\n};\n\n// Alternative\n// ----- Dorman-Prince (adaptive Runge-Kutta) ----- \n\nvar dp54System2 = function (f, tSpan, y0, tol, h0) {\n    var y = [y0];\n    var t = [tSpan[0]];\n    var n = 0, evals = 0;\n    var h = h0 || (tSpan[1] - tSpan[0]) / 100; // initial guess\n    var r, scale, r2, ri;\n    \n    var k = [], j, g;\n    var i, yEst = [], yEstSlope, size = y0.length;\n    var a = [[1/5],\n             [3/40, 9/40],\n             [44/45, -56/15, 32/9],\n             [19372/6561, -25360/2187, 64448/6561, -212/729],\n             [9017/3168, -355/33, 46732/5247, 49/176, -5103/18656],\n             [35/384, 0, 500/1113, 125/192, -2187/6784, 11/84]];\n    \n    var b = [35/384, 0, 500/1113, 125/192, -2187/6784, 11/84];\n    \n    var c = [1/5, 3/10, 4/5, 8/9, 1, 1];\n    \n    // coefficients for error calculation (e = b - b*)\n    var e = [71/57600, 0, -71/16695, 71/1920, -17253/339200, 22/525, -1/40];\n    \n    tol || (tol = 1e-2);\n    \n    while (t[n] < tSpan[1]) {\n        \n        // Don't go beyond tSpan[1]\n        if (t[n] + h > tSpan[1]) h = tSpan[1] - t[n];\n        \n        k[0] = f(t[n], y[n]);\n        \n        for (j = 1; j <= 6; j++) {\n            for (i = 0; i < size; i++) {\n                yEstSlope = 0;\n                for (g = 0; g < j; g++) {\n                    yEstSlope += a[j-1][g]*k[g][i];    \n                }\n                yEst[i] = y[n][i] + h*yEstSlope;\n            }\n            k[j] = f(t[n] + c[j-1]*h, yEst);\n        }\n        \n        // r = estimated error / h\n        for (i = 0, r2 = 0; i < size; i++) {\n            ri = e[0]*k[0][i] + e[2]*k[2][i] + e[3]*k[3][i] + e[4]*k[4][i] + \n                   e[5]*k[5][i] + e[6]*k[6][i];\n            r2 += ri*ri;\n        }\n        r = Math.sqrt(r2);\n        scale = 0.84 * Math.pow(tol / r, 1/4); // (1/2)^(1/4) ≈ 0.84\n        \n        // Check if step is accurate enough\n        if (r < tol) {\n            y[n+1] = [];\n            for (i = 0; i < size; i++) {\n                y[n+1][i] = y[n][i] + h*(b[0]*k[0][i] + b[2]*k[2][i] + \n                            b[3]*k[3][i] + b[4]*k[4][i] + b[5]*k[5][i]);\n            }\n            t[n+1] = t[n] + h;\n            n++;\n        }\n        \n        // Adjust step size\n        if (scale < 0.1) h *= 0.1;\n        else if (scale > 4) h *= 4;\n        else h *= scale;\n        \n        if (h > 2) h = 2; // too large?\n        else if (h < 1e-6) h = 1e-6;\n        \n        evals += 7;\n    }\n    \n    return {t:t, y:transpose(y), evals:evals};\n};\n"]],"start1":0,"start2":0,"length1":0,"length2":7780}]],"length":7780}
