{"ts":1353773247729,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"var linspace = function (a, b, n) {\n    var step = (b - a) / (n - 1);\n    var array = [];\n    for (var i = 0; i < n; i++) {\n        array.push(a + i * step);\n    }\n    return array;\n};\nvar logspace = function (a, b, n) {\n    return linspace(a, b, n).map(function (x) { return Math.pow(10, x); });\n};\n\nvar logError = function (name, sol, exact) {\n    var solutionError = function (t, y, exact) {\n        var err, max = 0;\n        for (var i = 1, len = y.length; i < len; i++) {\n            err = Math.abs(y[i] - exact(t[i]));\n            if (err > max) {\n                max = err;\n            }\n        }\n        return {max:max, final:err};\n    };\n    var pad = function (str, len) {\n        str = '' + str;\n        return str + Array(len > str.length ? len - str.length + 1 : 0).join(' ');\n    };\n    \n    var error;\n    if (sol.y[0].length) { // system\n        for (var i = 0; i < sol.y.length;  i++) {\n            \n            error = solutionError(sol.t, sol.y[i], function (t) { return exact(t)[i]; });\n            console.log(pad(name + ' ' + i, 10),\n                ' Error max:', pad(error.max, 25),\n                ' Error final:', pad(error.final, 25),\n                ' Steps:', pad(sol.t.length - 1, 7),\n                (sol.evals ? 'Evaluations: ' + sol.evals : '')\n            );\n        }\n    }\n    else { // single\n        error = solutionError(sol.t, sol.y, exact);\n        console.log(pad(name, 10),\n            ' Error max:', pad(error.max, 25),\n            ' Error final:', pad(error.final, 25),\n            ' Steps:', pad(sol.t.length - 1, 7),\n            (sol.evals ? 'Evaluations: ' + sol.evals : '')\n        );\n    }\n    \n};"]],"start1":0,"start2":0,"length1":0,"length2":1649}]],"length":1649}
