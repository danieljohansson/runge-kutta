{"ts":1353773264069,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"var GM = 19.93;\nvar dt = 0.01;\nvar n, t, r, x, y, vx, vy, ax, ay;\nvar j;\n\n// ===== leapfrog =====\nn = 0;\nt = 0;\nr = 100;\nx = [2];\ny = [0];\nvx = [0];\nvy = [4.038]; // jr/h\nax = [0];\nay = [0];\n\nwhile (t < 3*24 && r > 1) {\n    \n    x[n+1] = x[n] + vx[n]*dt + 0.5*ax[n]*dt*dt;\n    y[n+1] = y[n] + vy[n]*dt + 0.5*ay[n]*dt*dt;\n    \n    r = Math.sqrt(x[n+1]*x[n+1] + y[n+1]*y[n+1]);\n    \n    ax[n+1] = -GM*x[n+1]/(r*r*r);\n    ay[n+1] = -GM*y[n+1]/(r*r*r);\n\n    vx[n+1] = vx[n] + 0.5*(ax[n] + ax[n+1])*dt;\n    vy[n+1] = vy[n] + 0.5*(ay[n] + ay[n+1])*dt;\n    \n    t = t + dt;\n    \n    n++;\n}\nconsole.log('Leapfrog:', n);\n\nvar plot1 = new Plot();\nplot1.setSize(800, 600);\nplot1.plot(x, y, 'orange');\n\n// Jorden!!\nj = linspace(0, 2*Math.PI, 40);\nplot1.plot(j.map(Math.cos), j.map(Math.sin), '#5e5');\n\n\n// ===== Solver =====\nvar sol, y0 = [2, 0, 0, 4.038];\nvar f = function (t, x) {\n    return [\n        x[2],\n        x[3],\n        -GM * x[0] / Math.pow(x[0]*x[0] + x[1]*x[1], 3/2),\n        -GM * x[1] / Math.pow(x[0]*x[0] + x[1]*x[1], 3/2)\n    ];\n};\n\n// euler\nsol = eulerSystem(f, [0, 2*24], y0, 0.5*dt);\nplot1.plot(sol.y[0], sol.y[1], 'lightblue');\nconsole.log('Euler:   ', sol.t.length);\n\n// runge-kutta 4\ntic('rk4')\nsol = rk4System(f, [0, 30*24], y0, 2*dt);\ntoc('rk4')\nplot1.plot(sol.y[0], sol.y[1], 'purple');\nconsole.log('RK4:     ', sol.t.length);\n\n// dp54\ntic('dp54')\nsol = dp54System(f, [0, 30*24], y0, 1e-9, 1e-9);\ntoc('dp54')\nplot1.plot(sol.y[0], sol.y[1], 'red');\nconsole.log('DP54:    ', sol.t.length);\n\nplot1.axisEqual();\n"]],"start1":0,"start2":0,"length1":0,"length2":1524}]],"length":1524}
